{"version":3,"sources":["types/TodoStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","Filters/filters.ts","index.tsx"],"names":["TodoStatus","TodoList","todos","onSelectTodo","selectedTodoId","className","map","todo","id","completed","title","type","onClick","TodoFilter","setFilterStatus","setSearchQuery","searchQuery","handleClearSearch","onChange","event","target","value","Object","entries","key","placeholder","onKeyDown","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","userId","useState","user","setUser","loading","setLoading","useEffect","getUser","userData","finally","href","email","name","App","setTodos","todosError","setTodosError","selectedTodo","setSelectedTodo","filterStatus","todosData","catch","error","message","currentFilteredTodos","tempTodos","Active","filter","Completed","toLowerCase","includes","filterAndSearchTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ea636df.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoListProps {\n  todos: Todo[];\n  onSelectTodo: (todo: Todo) => void;\n  selectedTodoId: number | null;\n}\n\nexport const TodoList:\nReact.FC<TodoListProps> = ({ todos, onSelectTodo, selectedTodoId }) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <tbody>\n        {todos.map((todo) => {\n          const { id, completed, title } = todo;\n\n          return (\n            <tr key={id} data-cy=\"todo\" className=\"\">\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    {id === selectedTodoId ? (\n                      <i className=\"far fa-eye-slash\" />\n                    ) : (\n                      <i className=\"far fa-eye\" />\n                    )}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { ChangeEvent, FC } from 'react';\nimport { TodoStatus } from '../../types/TodoStatus';\n\ntype TodoFilterProps = {\n  setFilterStatus: (status: string) => void;\n  setSearchQuery: (query: string) => void;\n  searchQuery: string;\n};\n\nexport const TodoFilter: FC<TodoFilterProps> = (\n  {\n    setFilterStatus, setSearchQuery, searchQuery,\n  },\n) => {\n  const handleStatusChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setFilterStatus(event.target.value);\n  };\n\n  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleClearSearch = () => {\n    setSearchQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleStatusChange}\n          >\n            {Object.entries(TodoStatus).map(([key, value]) => (\n              <option key={value} value={value}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleSearchChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-search\" />\n        </span>\n\n        {searchQuery && (\n          <span\n            className=\"icon is-right\"\n          >\n            <button\n              onClick={handleClearSearch}\n              onKeyDown={handleClearSearch}\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Clear Search\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  onClose: () => void;\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ onClose, todo }) => {\n  const {\n    userId,\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(userId)\n      .then((userData: User) => setUser(userData))\n      .finally(() => setLoading(false));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n              {' by '}\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { filterAndSearchTodos } from './Filters/filters';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todosError, setTodosError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  useEffect(() => {\n    getTodos()\n      .then((todosData) => {\n        setTodos(todosData);\n      })\n      .catch((error) => setTodosError(error.message))\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  const onSelectTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const currentFilteredTodos\n  = filterAndSearchTodos(todos, filterStatus, searchQuery);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter\n                setFilterStatus={setFilterStatus}\n                setSearchQuery={setSearchQuery}\n                searchQuery={searchQuery}\n              />\n            </div>\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={currentFilteredTodos}\n                    onSelectTodo={onSelectTodo}\n                    selectedTodoId={selectedTodo?.id ?? null}\n                  />\n                )}\n\n              {todosError && (\n                <p>{todosError}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={() => setSelectedTodo(null)}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { TodoStatus } from '../types/TodoStatus';\n\nexport const filterAndSearchTodos = (\n  todos: Todo[],\n  filterStatus: string,\n  searchQuery: string,\n): Todo[] => {\n  let tempTodos = [...todos];\n\n  switch (filterStatus) {\n    case TodoStatus.Active:\n      tempTodos = tempTodos.filter(todo => !todo.completed);\n      break;\n    case TodoStatus.Completed:\n      tempTodos = tempTodos.filter(todo => todo.completed);\n      break;\n    default:\n      break;\n  }\n\n  if (searchQuery) {\n    tempTodos = tempTodos.filter(todo => todo.title\n      .toLowerCase().includes(searchQuery.toLowerCase()));\n  }\n\n  return tempTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}